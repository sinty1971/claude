/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get folders
         * @description Retrieve a list of folders from the specified path
         */
        get: operations["getFolders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse time string
         * @description Parse various date/time string formats
         */
        post: operations["parseTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kouji-folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get kouji folders
         * @description Retrieve a list of construction project folders from the specified path
         */
        get: operations["getKoujiFolders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time/formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get supported time formats
         * @description Get list of all supported date/time formats
         */
        get: operations["getSupportedFormats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Folder: {
            /**
             * Format: int64
             * @description Unique identifier for the file or folder
             * @example 123456
             */
            id: number;
            /**
             * @description Name of the file or folder
             * @example documents
             */
            name: string;
            /**
             * @description Full path to the file or folder
             * @example /home/user/documents
             */
            path: string;
            /**
             * @description Whether this item is a directory
             * @example true
             */
            is_directory: boolean;
            /**
             * Format: int64
             * @description Size of the file in bytes
             * @example 4096
             */
            size: number;
            /**
             * Format: date-time
             * @description Last modification time
             * @example 2024-01-15T10:30:00Z
             */
            modified_time: string;
        };
        FolderListResponse: {
            folders: components["schemas"]["Folder"][];
            /**
             * @description Total number of folders returned
             * @example 10
             */
            count: number;
            /**
             * @description The path that was queried
             * @example /home/user/documents
             */
            path: string;
        };
        ErrorResponse: {
            /**
             * @description Error type
             * @example Failed to read directory
             */
            error: string;
            /**
             * @description Detailed error message
             * @example Permission denied
             */
            message: string;
        };
        TimeParseRequest: {
            /**
             * @description Time string to parse
             * @example 2024-01-15T10:30:00
             */
            time_string: string;
        };
        TimeParseResponse: {
            /**
             * @description Original input string
             * @example 2024-01-15T10:30:00
             */
            original: string;
            /**
             * @description Parsed time in RFC3339 format
             * @example 2024-01-15T10:30:00Z
             */
            rfc3339: string;
            /**
             * Format: int64
             * @description Unix timestamp
             * @example 1705318200
             */
            unix: number;
            /**
             * @description Human readable format
             * @example January 15, 2024 10:30 AM
             */
            readable: string;
            /**
             * @description Time zone used
             * @example Local
             */
            timezone: string;
        };
        TimeFormat: {
            /**
             * @description Format name
             * @example RFC3339
             */
            name: string;
            /**
             * @description Format pattern
             * @example 2006-01-02T15:04:05Z07:00
             */
            pattern: string;
            /**
             * @description Example value
             * @example 2024-01-15T10:30:00Z
             */
            example: string;
        };
        KoujiFolder: {
            /**
             * Format: int64
             * @description Unique identifier for the file or folder
             * @example 123456
             */
            id: number;
            /**
             * @description Name of the file or folder
             * @example documents
             */
            name: string;
            /**
             * @description Full path to the file or folder
             * @example /home/user/documents
             */
            path: string;
            /**
             * @description Whether this item is a directory
             * @example true
             */
            is_directory: boolean;
            /**
             * Format: int64
             * @description Size of the file in bytes
             * @example 4096
             */
            size: number;
            /**
             * Format: date-time
             * @description Last modification time
             * @example 2024-01-15T10:30:00Z
             */
            modified_time: string;
            /**
             * @description Project identifier
             * @example PRJ-2024-001
             */
            project_id?: string;
            /**
             * @description Project name
             * @example 豊田築炉工事
             */
            project_name?: string;
            /**
             * @description Project status
             * @example 進行中
             */
            status?: string;
            /**
             * Format: date-time
             * @description Project start date
             * @example 2024-01-01T00:00:00Z
             */
            start_date?: string;
            /**
             * Format: date-time
             * @description Project end date
             * @example 2024-12-31T00:00:00Z
             */
            end_date?: string;
            /**
             * @description Project description
             * @example 工事関連の資料とドキュメント
             */
            description?: string;
            /**
             * @description Project tags
             * @example [
             *       "工事",
             *       "豊田",
             *       "築炉"
             *     ]
             */
            tags?: string[];
            /**
             * @description Number of files in directory
             * @example 42
             */
            file_count?: number;
            /**
             * @description Number of subdirectories
             * @example 5
             */
            subdir_count?: number;
        };
        KoujiFolderListResponse: {
            folders: components["schemas"]["KoujiFolder"][];
            /**
             * @description Total number of folders returned
             * @example 10
             */
            count: number;
            /**
             * @description The path that was queried
             * @example ~/penguin/豊田築炉/2-工事
             */
            path: string;
            /**
             * Format: int64
             * @description Total size of all files in bytes
             * @example 1073741824
             */
            total_size?: number;
        };
        SupportedFormatsResponse: {
            formats: components["schemas"]["TimeFormat"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getFolders: {
        parameters: {
            query?: {
                /** @description Path to the directory to list */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderListResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    parseTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TimeParseRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeParseResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getKoujiFolders: {
        parameters: {
            query?: {
                /** @description Path to the directory to list */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KoujiFolderListResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSupportedFormats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportedFormatsResponse"];
                };
            };
        };
    };
}
